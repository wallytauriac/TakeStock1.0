Generated by <https://www.codeconvert.ai/python-to-java-converter> 
It converts some code for Spring Boot in place of Python Flask

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.SessionScope;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

class DB_Mgr {
    private Connection mysql;

    public DB_Mgr(Connection obj) {
        this.mysql = obj;
    }

    public Object[] get_player_record(String username) throws SQLException {
        String query = "SELECT * FROM players WHERE username = ?";
        try (PreparedStatement pstmt = mysql.prepareStatement(query)) {
            pstmt.setString(1, username);
            ResultSet resultSet = pstmt.executeQuery();
            Object result = null;
            if (resultSet.next()) {
                // Assuming the result is an Object, you may need to adjust this based on your actual data structure
                result = resultSet.getObject(1); // Adjust index based on your needs
            }
            return new Object[]{result, pstmt.executeUpdate()};
        }
    }
}

import java.util.Map;
import java.util.HashMap;

public class YourClass {
    public String validatePassword(Map<String, Object> data, String passwordCandidate, String username) {
        String password = (String) data.get("password");
        String status = "NOK";
        
        if (Sha256Crypt.verify(passwordCandidate, password)) {
            Map<String, Object> session = new HashMap<>();
            session.put("logged_in", true);
            session.put("username", username);
            session.put("role", data.get("role"));
            session.put("player_number", 1);
            session.put("player_round", 1);
            session.put("player_move", 1);
            status = "OK";
        }
        
        return status;
    }
}

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class YourClass {
    private Connection connection;

    public String updatePassword(String username, YourForm form) throws SQLException {
        String status = "NOK";
        String newPassword = form.getNewPassword();
        String enteredPassword = form.getOldPassword();
        String oldPassword = null;

        String selectQuery = "SELECT password FROM players WHERE username = ?";
        try (PreparedStatement selectStmt = connection.prepareStatement(selectQuery)) {
            selectStmt.setString(1, username);
            ResultSet resultSet = selectStmt.executeQuery();
            if (resultSet.next()) {
                oldPassword = resultSet.getString("password");
            }
        }

        if (Sha256Crypt.verify(enteredPassword, oldPassword)) {
            String updateQuery = "UPDATE players SET password = ? WHERE username = ?";
            try (PreparedStatement updateStmt = connection.prepareStatement(updateQuery)) {
                updateStmt.setString(1, Sha256Crypt.encrypt(newPassword));
                updateStmt.setString(2, username);
                updateStmt.executeUpdate();
                status = "OK";
            }
        }
        return status;
    }
}

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class YourClassName {
    private Connection connection;

    public YourClassName(Connection connection) {
        this.connection = connection;
    }

    public Pair<String, List<String>> getGamePlayers(int gameID) {
        String status = "NOK";
        List<String> users = new ArrayList<>();
        try {
            PreparedStatement stmt = connection.prepareStatement("SELECT username FROM players WHERE game_ID = ?");
            stmt.setInt(1, gameID);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                users.add(rs.getString("username"));
            }
            rs.close();
            stmt.close();
            status = "OK";
        } catch (SQLException e) {
            System.out.println("Database error: " + e.getMessage());
            users = new ArrayList<>();
        }
        return new Pair<>(status, users);
    }
}

class Pair<K, V> {
    private K key;
    private V value;

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    public K getKey() {
        return key;
    }

    public V getValue() {
        return value;
    }
}
